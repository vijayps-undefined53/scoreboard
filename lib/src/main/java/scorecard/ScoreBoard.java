/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package scorecard;

import scorecard.repo.Match;
import scorecard.repo.Teams;
import scorecard.service.impl.ScoreBoardService;

import java.util.*;
import java.util.stream.Collectors;

import static scorecard.Constants.VALIDATION_ERROR_ON_UPDATING_SCORE_WITH_TEAM_NOT_IN_MATCH;

public class ScoreBoard {
    List<Match> matches = new ArrayList<>();
    String game;
    ScoreBoardService scoreBoardService;

    public ScoreBoard(String game) {
        this.game = game;
        scoreBoardService = ScoreBoardService.getInstance();
    }

    public Match createMatch(LinkedHashSet<String> teams) {
        if (teams == null || teams.isEmpty() || teams.stream().anyMatch(Objects::isNull)) {
            throw new RuntimeException("Valid teams names expected");
        }
        List<Teams> teamInMatch = findTeamsInScoreBoardBasedOnName(teams);
        if (teamInMatch != null && !teamInMatch.isEmpty()) {
            throw new RuntimeException("A match is already going one or both of team names provided");
        }
        Match match = scoreBoardService.createMatch(this.game, teams, this);
        // adding it to the scoreboard
        this.matches.add(match);
        return match;
    }

    private List<Teams> findTeamsInScoreBoardBasedOnName(LinkedHashSet<String> teams) {
        if (matches != null && !matches.isEmpty()) {
            for (Match match : matches) {
                List<Teams> teamsList = findTeamsInMatchBasedOnTeamNames(teams, match);
                if (teamsList != null) return teamsList;
            }
        }
        return null;
    }

    private List<Teams> findTeamsInMatchBasedOnTeamNames(LinkedHashSet<String> teams, Match match) {
        if (match != null && match.getScore() != null) {
            return match.getScore().keySet().stream().filter(
                    teamObject -> teams.contains(teamObject.getName())).collect(
                    Collectors.toList());
        }
        return null;
    }

    public List<Match> getMatches() {
        return this.matches;
    }

    public Match updateScore(Map<String, Object> score,
                             Match match) {
        List<Teams> teamInMatch = findTeamsInMatchBasedOnTeamNames((LinkedHashSet<String>) score.keySet(), match);
        if (teamInMatch == null || !(teamInMatch.size() == score.keySet().size())) {
            throw new RuntimeException(VALIDATION_ERROR_ON_UPDATING_SCORE_WITH_TEAM_NOT_IN_MATCH);
        }
        return null;
    }
}
